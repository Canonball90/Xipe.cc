package xipe.module.modules.exploit;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.entity.Entity;
import net.minecraft.entity.projectile.ArrowEntity;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import xipe.module.Mod;
import xipe.module.settings.NumberSetting;
import xipe.utils.render.RenderUtils;

public class ArrowJuke extends Mod{
	
	NumberSetting predict = new NumberSetting("Perdiction", 1, 20, 10, 1);
	NumberSetting accuracy = new NumberSetting("Accuracy", 0, 2, 2, 0.1);
	NumberSetting expand = new NumberSetting("H-Expansion", 0, 3, 1, 0.1);
	
	List<Vec3d> bruhMoments = new ArrayList<>();

	public ArrowJuke() {
		super("ArrowJuke", "automatically jukes arrows", Category.EXPLOIT);
	}
	
	@Override
	public void onTick() {
		nullCheck();
		   bruhMoments.clear();
	        for (Entity e : mc.world.getEntities()) {
	            if (e instanceof ArrowEntity) {
	                if (e.isOnGround()) continue;
	                if (e.age > 300) continue;
	                Vec3d arrowRot = e.getVelocity();
	                for (double i = 0; i < predict.getValue(); i += accuracy.getValue()) {
	                    Vec3d arrowPos = e.getPos().add(arrowRot.multiply(i));
	                    bruhMoments.add(arrowPos);
	                    if (mc.player.getBoundingBox().expand(expand.getValue()).contains(arrowPos)) {
	                        Vec3d goTo = null;
	                        for (int x = -2; x < 3; x++) {
	                            if (goTo != null) break;
	                            for (int z = -2; z < 3; z++) {
	                                if (!mc.player.getBoundingBox().expand(expand.getValue()).offset(x, 0, z).contains(arrowPos)) {
	                                    Vec3d cp = new Vec3d(x, 0, z);
	                                    BlockPos np = mc.player.getBlockPos().add(cp.x, cp.y, cp.z);
	                                    if (mc.world.getBlockState(np).getMaterial().isReplaceable() && mc.world.getBlockState(np.add(0, 1, 0)).getMaterial().isReplaceable()) {
	                                        goTo = cp;
	                                        break;
	                                    }
	                                }
	                            }
	                        }
	                        if (goTo != null) {
	                            Vec3d nv = goTo.multiply(0.2);
	                            //Vec3d np = Atomic.client.player.getPos().add(goTo);
	                            //Atomic.client.player.updatePosition(np.x, np.y, np.z);
	                            mc.player.setVelocity(nv.x, nv.y, nv.z);
	                        }
	                    }
	                }
	            }
	        }
		super.onTick();
	}
	
	@Override
	public void onWorldRender(MatrixStack matrices) {
		  for (Vec3d bruhMoment : bruhMoments) {
	            //RenderUtils.(bruhMoment, new Vec3d(0.1, 0.1, 0.1), Color.RED, matrices);
	        }
		super.onWorldRender(matrices);
	}

}
