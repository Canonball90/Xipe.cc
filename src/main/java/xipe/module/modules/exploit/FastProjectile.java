package xipe.module.modules.exploit;

import com.google.common.eventbus.Subscribe;

import net.minecraft.client.MinecraftClient;
import net.minecraft.entity.Entity;
import net.minecraft.item.BowItem;
import net.minecraft.item.EnderPearlItem;
import net.minecraft.item.ItemStack;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.Hand;
import xipe.event.events.EventSendPacket;
import xipe.module.Mod;
import xipe.module.Mod.Category;
import xipe.module.settings.BooleanSetting;
import xipe.module.settings.ModeSetting;
import xipe.module.settings.NumberSetting;

public class FastProjectile extends Mod {
    public static FastProjectile get;
    private Entity boat = null;
    
    public ModeSetting mode = new ModeSetting("Mode", "Bypass", "Bypass", "Static");
    public NumberSetting timeout = new NumberSetting("Timeout",1500, 7000, 2500, 1);
    public NumberSetting spoofs = new NumberSetting("Spoofs",0, 25, 5, 1);
    public BooleanSetting bows = new BooleanSetting("Bows", false);
    public BooleanSetting pearls = new BooleanSetting("Pearls", false);
    public BooleanSetting bypass = new BooleanSetting("Bypass", false);
    
    private long lastShootTime;
    
    public FastProjectile() {
        super("FastProjectile", "Trow projectiles faster", Category.EXPLOIT);
        addSettings(mode,timeout,bows,pearls,spoofs,bypass);
        get = this;
    }
    
    @Override
    public void onEnable() {
    	lastShootTime = System.currentTimeMillis();
    	super.onEnable();
    }
    
    @Override
    public void onTick() {
        if (System.currentTimeMillis() - lastShootTime >= timeout.getValue()) {
        	
        }
    }

    @Subscribe
    public void onPacketSend(EventSendPacket event) {
        if (event.packet instanceof PlayerActionC2SPacket packet) {
            if (packet.getAction() == PlayerActionC2SPacket.Action.RELEASE_USE_ITEM) {
                ItemStack handStack = mc.player.getStackInHand(Hand.MAIN_HAND);

                if (!handStack.isEmpty() && handStack.getItem() != null && handStack.getItem() instanceof BowItem && bows.isEnabled()) {
                    doSpoofs();
                }
            }

        } else if (event.packet instanceof PlayerInteractItemC2SPacket packet2) {
            if (packet2.getHand() == Hand.MAIN_HAND) {
                ItemStack handStack = mc.player.getStackInHand(Hand.MAIN_HAND);

                if (!handStack.isEmpty() && handStack.getItem() != null) {
                    if (handStack.getItem() instanceof EnderPearlItem && pearls.isEnabled()) {
                        doSpoofs();
                    }
                }
            }
        }
    }
        
        private void doSpoofs() {
            if (System.currentTimeMillis() - lastShootTime >= timeout.getValue()) {
                lastShootTime = System.currentTimeMillis();

                mc.player.networkHandler.sendPacket(new ClientCommandC2SPacket(mc.player, ClientCommandC2SPacket.Mode.START_SPRINTING));

                for (int i = 0; i < spoofs.getValue(); i++) {
                    if (bypass.isEnabled()) {
                        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + 1e-10, mc.player.getZ(), false));
                        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() - 1e-10, mc.player.getZ(), true));
                    } else {
                        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() - 1e-10, mc.player.getZ(), true));
                        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + 1e-10, mc.player.getZ(), false));
                    }
                }
            }
        }
}
